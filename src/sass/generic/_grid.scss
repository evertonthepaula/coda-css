// Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// ____________________________________________________________
// Custom Grid system based in:
// https://milligram.io/grids.html_____________________________
//
// ____________________________________________________________
// Using flexbox for the grid, inspired by Philip Walton:
// http://philipwalton.github.io/solved-by-flexbox/demos/grids/

.container {
  display: block;
  width: 100%;
  max-width: $max-template-width;
  margin: 0 auto;

  &.wrapper {
    clear: both;
    box-sizing: border-box;
    max-width: 1832px;
    border-radius: 10px;
  }
}

.grid {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-content: flex-start;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 0;

  &.-no-padding {
    padding: 0;

    & > .flex {
      padding: 0;
    }
  }

  &.-no-wrap {
    flex-wrap: nowrap;
  }
  // Vertically Align Columns
  // .row-* vertically aligns every .col in the .row
  &.-top {
    align-items: flex-start;
  }

  &.-bottom {
    align-items: flex-end;
  }

  &.-center {
    align-items: center;
  }

  &.-stretch {
    align-items: stretch;
  }

  &.-baseline {
    align-items: baseline;
  }

  .flex {
    display: flex;
    // IE 11 required specifying the flex-basis otherwise it breaks mobile
    flex: 1 1 auto;
    box-sizing: border-box;
    max-width: 100%;
    margin-left: 0;

    // Column Offsets
    &.-offset-10 {
      margin-left: 10%;
    }

    &.-offset-20 {
      margin-left: 20%;
    }

    &.-offset-25 {
      margin-left: 25%;
    }

    &.-offset-33,
    &.-offset-34 {
      margin-left: 33.3333%;
    }

    &.-offset-50 {
      margin-left: 50%;
    }

    &.-offset-66,
    &.-offset-67 {
      margin-left: 66.6666%;
    }

    &.-offset-75 {
      margin-left: 75%;
    }

    &.-offset-80 {
      margin-left: 80%;
    }

    &.-offset-90 {
      margin-left: 90%;
    }
    // Explicit Column Percent Sizes
    // By default each grid column will evenly distribute
    // across the grid. However, you can specify individual
    // columns to take up a certain size of the available area
    &.f-10 {
      flex: 1 0 10%;
      max-width: 10%;
    }

    &.f-20 {
      flex: 1 0 20%;
      max-width: 20%;
    }

    &.f-25 {
      flex: 1 0 25%;
      max-width: 25%;
    }

    &.f-33,
    &.f-34 {
      flex: 1 0 33.3333%;
      max-width: 33.3333%;
    }

    &.f-40 {
      flex: 1 0 40%;
      max-width: 40%;
    }

    &.f-50 {
      flex: 1 0 50%;
      max-width: 50%;
    }

    &.f-60 {
      flex: 1 0 60%;
      max-width: 60%;
    }

    &.f-66,
    &.f-67 {
      flex: 1 0 66.6666%;
      max-width: 66.6666%;
    }

    &.f-75 {
      flex: 1 0 75%;
      max-width: 75%;
    }

    &.f-80 {
      flex: 1 0 80%;
      max-width: 80%;
    }

    &.f-90 {
      flex: 1 0 90%;
      max-width: 90%;
    }
    // .column-* vertically aligns an individual .column
    &.align-top {
      align-self: flex-start;
    }

    &.align-bottom {
      align-self: flex-end;
    }

    &.align-center {
      align-self: center;
    }
  }
}

@media (max-width: 40rem) {
  .grid {
    flex-direction: column;
    width: calc(100% + 2rem);
    margin-left: -1rem;

    .flex {
      flex: 0 0 100%;
      margin-bottom: inherit;
      padding: 0 1rem;
    }
  }
}
